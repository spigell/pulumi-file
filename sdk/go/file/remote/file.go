// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remote

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/spigell/pulumi-file/sdk/go/file/internal"
)

// A file to be created on a remote host. The connection is established via ssh.
type File struct {
	pulumi.CustomResourceState

	// The parameters with which to connect to the remote host.
	Connection ConnectionOutput `pulumi:"connection"`
	// The content of file
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// The md5sum of the uploaded file
	Md5sum pulumi.StringOutput `pulumi:"md5sum"`
	// The path for file on remote server
	Path pulumi.StringOutput `pulumi:"path"`
	// Unix permissions for file
	Permissions pulumi.StringPtrOutput `pulumi:"permissions"`
	// sudo mode requires a external sftp server to be running on remote host
	SftpPath pulumi.StringPtrOutput `pulumi:"sftpPath"`
	// Trigger replacements on changes to this input.
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`
	// if enabled then use sudo for copy command instead of direct copy
	UseSudo pulumi.BoolPtrOutput `pulumi:"useSudo"`
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOption) (*File, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Connection == nil {
		return nil, errors.New("invalid value for required argument 'Connection'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	args.Connection = args.Connection.ToConnectionOutput().ApplyT(func(v Connection) Connection { return *v.Defaults() }).(ConnectionOutput)
	if args.Permissions == nil {
		args.Permissions = pulumi.StringPtr("0664")
	}
	if args.SftpPath == nil {
		args.SftpPath = pulumi.StringPtr("/usr/lib/ssh/sftp-server")
	}
	if args.Connection != nil {
		args.Connection = pulumi.ToSecret(args.Connection).(ConnectionInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connection",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource File
	err := ctx.RegisterResource("file:remote:File", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileState, opts ...pulumi.ResourceOption) (*File, error) {
	var resource File
	err := ctx.ReadResource("file:remote:File", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering File resources.
type fileState struct {
}

type FileState struct {
}

func (FileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileState)(nil)).Elem()
}

type fileArgs struct {
	// The parameters with which to connect to the remote host.
	Connection Connection `pulumi:"connection"`
	// The content of file
	Content *string `pulumi:"content"`
	// The path for file on remote server
	Path string `pulumi:"path"`
	// Unix permissions for file
	Permissions *string `pulumi:"permissions"`
	// sudo mode requires a external sftp server to be running on remote host
	SftpPath *string `pulumi:"sftpPath"`
	// Trigger replacements on changes to this input.
	Triggers []interface{} `pulumi:"triggers"`
	// if enabled then use sudo for copy command instead of direct copy
	UseSudo *bool `pulumi:"useSudo"`
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	// The parameters with which to connect to the remote host.
	Connection ConnectionInput
	// The content of file
	Content pulumi.StringPtrInput
	// The path for file on remote server
	Path pulumi.StringInput
	// Unix permissions for file
	Permissions pulumi.StringPtrInput
	// sudo mode requires a external sftp server to be running on remote host
	SftpPath pulumi.StringPtrInput
	// Trigger replacements on changes to this input.
	Triggers pulumi.ArrayInput
	// if enabled then use sudo for copy command instead of direct copy
	UseSudo pulumi.BoolPtrInput
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileArgs)(nil)).Elem()
}

type FileInput interface {
	pulumi.Input

	ToFileOutput() FileOutput
	ToFileOutputWithContext(ctx context.Context) FileOutput
}

func (*File) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (i *File) ToFileOutput() FileOutput {
	return i.ToFileOutputWithContext(context.Background())
}

func (i *File) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOutput)
}

func (i *File) ToOutput(ctx context.Context) pulumix.Output[*File] {
	return pulumix.Output[*File]{
		OutputState: i.ToFileOutputWithContext(ctx).OutputState,
	}
}

// FileArrayInput is an input type that accepts FileArray and FileArrayOutput values.
// You can construct a concrete instance of `FileArrayInput` via:
//
//	FileArray{ FileArgs{...} }
type FileArrayInput interface {
	pulumi.Input

	ToFileArrayOutput() FileArrayOutput
	ToFileArrayOutputWithContext(context.Context) FileArrayOutput
}

type FileArray []FileInput

func (FileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (i FileArray) ToFileArrayOutput() FileArrayOutput {
	return i.ToFileArrayOutputWithContext(context.Background())
}

func (i FileArray) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileArrayOutput)
}

func (i FileArray) ToOutput(ctx context.Context) pulumix.Output[[]*File] {
	return pulumix.Output[[]*File]{
		OutputState: i.ToFileArrayOutputWithContext(ctx).OutputState,
	}
}

// FileMapInput is an input type that accepts FileMap and FileMapOutput values.
// You can construct a concrete instance of `FileMapInput` via:
//
//	FileMap{ "key": FileArgs{...} }
type FileMapInput interface {
	pulumi.Input

	ToFileMapOutput() FileMapOutput
	ToFileMapOutputWithContext(context.Context) FileMapOutput
}

type FileMap map[string]FileInput

func (FileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (i FileMap) ToFileMapOutput() FileMapOutput {
	return i.ToFileMapOutputWithContext(context.Background())
}

func (i FileMap) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileMapOutput)
}

func (i FileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*File] {
	return pulumix.Output[map[string]*File]{
		OutputState: i.ToFileMapOutputWithContext(ctx).OutputState,
	}
}

type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

func (o FileOutput) ToOutput(ctx context.Context) pulumix.Output[*File] {
	return pulumix.Output[*File]{
		OutputState: o.OutputState,
	}
}

// The parameters with which to connect to the remote host.
func (o FileOutput) Connection() ConnectionOutput {
	return o.ApplyT(func(v *File) ConnectionOutput { return v.Connection }).(ConnectionOutput)
}

// The content of file
func (o FileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// The md5sum of the uploaded file
func (o FileOutput) Md5sum() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Md5sum }).(pulumi.StringOutput)
}

// The path for file on remote server
func (o FileOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Unix permissions for file
func (o FileOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.Permissions }).(pulumi.StringPtrOutput)
}

// sudo mode requires a external sftp server to be running on remote host
func (o FileOutput) SftpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *File) pulumi.StringPtrOutput { return v.SftpPath }).(pulumi.StringPtrOutput)
}

// Trigger replacements on changes to this input.
func (o FileOutput) Triggers() pulumi.ArrayOutput {
	return o.ApplyT(func(v *File) pulumi.ArrayOutput { return v.Triggers }).(pulumi.ArrayOutput)
}

// if enabled then use sudo for copy command instead of direct copy
func (o FileOutput) UseSudo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.UseSudo }).(pulumi.BoolPtrOutput)
}

type FileArrayOutput struct{ *pulumi.OutputState }

func (FileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (o FileArrayOutput) ToFileArrayOutput() FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*File] {
	return pulumix.Output[[]*File]{
		OutputState: o.OutputState,
	}
}

func (o FileArrayOutput) Index(i pulumi.IntInput) FileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *File {
		return vs[0].([]*File)[vs[1].(int)]
	}).(FileOutput)
}

type FileMapOutput struct{ *pulumi.OutputState }

func (FileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (o FileMapOutput) ToFileMapOutput() FileMapOutput {
	return o
}

func (o FileMapOutput) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return o
}

func (o FileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*File] {
	return pulumix.Output[map[string]*File]{
		OutputState: o.OutputState,
	}
}

func (o FileMapOutput) MapIndex(k pulumi.StringInput) FileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *File {
		return vs[0].(map[string]*File)[vs[1].(string)]
	}).(FileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileInput)(nil)).Elem(), &File{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileArrayInput)(nil)).Elem(), FileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileMapInput)(nil)).Elem(), FileMap{})
	pulumi.RegisterOutputType(FileOutput{})
	pulumi.RegisterOutputType(FileArrayOutput{})
	pulumi.RegisterOutputType(FileMapOutput{})
}
