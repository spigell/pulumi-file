// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Remote extends pulumi.CustomResource {
    /**
     * Get an existing Remote resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Remote {
        return new Remote(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'file:index:Remote';

    /**
     * Returns true if the given object is an instance of Remote.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Remote {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Remote.__pulumiType;
    }

    public readonly connection!: pulumi.Output<outputs.Connection | undefined>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly permissions!: pulumi.Output<string | undefined>;

    /**
     * Create a Remote resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RemoteArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["connection"] = args ? args.connection : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["hooks"] = args ? args.hooks : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["useSudo"] = (args ? args.useSudo : undefined) ?? false;
            resourceInputs["writableTempDirectory"] = args ? args.writableTempDirectory : undefined;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const replaceOnChanges = { replaceOnChanges: ["connection.address", "path", "permissions"] };
        opts = pulumi.mergeOptions(opts, replaceOnChanges);
        super(Remote.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Remote resource.
 */
export interface RemoteArgs {
    connection?: pulumi.Input<inputs.ConnectionArgs>;
    content?: pulumi.Input<string>;
    hooks?: pulumi.Input<inputs.HooksArgs>;
    path?: pulumi.Input<string>;
    permissions?: pulumi.Input<string>;
    useSudo?: pulumi.Input<boolean>;
    writableTempDirectory?: pulumi.Input<string>;
}
