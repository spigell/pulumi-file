// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * A file to be created on a remote host. The connection is established via ssh.
 */
export class File extends pulumi.CustomResource {
    /**
     * Get an existing File resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): File {
        return new File(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'file:remote:File';

    /**
     * Returns true if the given object is an instance of File.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is File {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === File.__pulumiType;
    }

    /**
     * The parameters with which to connect to the remote host.
     */
    public readonly connection!: pulumi.Output<outputs.remote.Connection>;
    /**
     * The content of file
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * The md5sum of the uploaded file
     */
    public /*out*/ readonly md5sum!: pulumi.Output<string>;
    /**
     * The path for file on remote server
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Unix permissions for file
     */
    public readonly permissions!: pulumi.Output<string | undefined>;
    /**
     * sudo mode requires a external sftp server to be running on remote host
     */
    public readonly sftpPath!: pulumi.Output<string | undefined>;
    /**
     * Trigger replacements on changes to this input.
     */
    public readonly triggers!: pulumi.Output<any[] | undefined>;
    /**
     * if enabled then use sudo for copy command instead of direct copy
     */
    public readonly useSudo!: pulumi.Output<boolean | undefined>;

    /**
     * Create a File resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.connection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connection'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["connection"] = args?.connection ? pulumi.secret((args.connection ? pulumi.output(args.connection).apply(inputs.remote.connectionArgsProvideDefaults) : undefined)) : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["permissions"] = (args ? args.permissions : undefined) ?? "0664";
            resourceInputs["sftpPath"] = (args ? args.sftpPath : undefined) ?? "/usr/lib/ssh/sftp-server";
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["useSudo"] = args ? args.useSudo : undefined;
            resourceInputs["md5sum"] = undefined /*out*/;
        } else {
            resourceInputs["connection"] = undefined /*out*/;
            resourceInputs["content"] = undefined /*out*/;
            resourceInputs["md5sum"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["sftpPath"] = undefined /*out*/;
            resourceInputs["triggers"] = undefined /*out*/;
            resourceInputs["useSudo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connection"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(File.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a File resource.
 */
export interface FileArgs {
    /**
     * The parameters with which to connect to the remote host.
     */
    connection: pulumi.Input<inputs.remote.ConnectionArgs>;
    /**
     * The content of file
     */
    content?: pulumi.Input<string>;
    /**
     * The path for file on remote server
     */
    path: pulumi.Input<string>;
    /**
     * Unix permissions for file
     */
    permissions?: pulumi.Input<string>;
    /**
     * sudo mode requires a external sftp server to be running on remote host
     */
    sftpPath?: pulumi.Input<string>;
    /**
     * Trigger replacements on changes to this input.
     */
    triggers?: pulumi.Input<any[]>;
    /**
     * if enabled then use sudo for copy command instead of direct copy
     */
    useSudo?: pulumi.Input<boolean>;
}
