# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FileArgs', 'File']

@pulumi.input_type
class FileArgs:
    def __init__(__self__, *,
                 connection: pulumi.Input['ConnectionArgs'],
                 path: pulumi.Input[str],
                 permissions: Optional[pulumi.Input[str]] = None,
                 stdin: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 use_sudo: Optional[pulumi.Input[bool]] = None,
                 writeble_directory_for_sudo_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a File resource.
        :param pulumi.Input['ConnectionArgs'] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] path: The path for file on remote server
        :param pulumi.Input[str] permissions: Unix permissions for file
        :param pulumi.Input[str] stdin: The content of file
        :param pulumi.Input[Sequence[Any]] triggers: Trigger replacements on changes to this input.
        :param pulumi.Input[bool] use_sudo: if enabled then use sudo for copy command instead of direct copy
        :param pulumi.Input[str] writeble_directory_for_sudo_mode: if sudo enabled will use this directory for temporary copy command
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "path", path)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if use_sudo is not None:
            pulumi.set(__self__, "use_sudo", use_sudo)
        if writeble_directory_for_sudo_mode is not None:
            pulumi.set(__self__, "writeble_directory_for_sudo_mode", writeble_directory_for_sudo_mode)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Input['ConnectionArgs']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: pulumi.Input['ConnectionArgs']):
        pulumi.set(self, "connection", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path for file on remote server
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[str]]:
        """
        Unix permissions for file
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def stdin(self) -> Optional[pulumi.Input[str]]:
        """
        The content of file
        """
        return pulumi.get(self, "stdin")

    @stdin.setter
    def stdin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stdin", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[Any]]]:
        """
        Trigger replacements on changes to this input.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[Any]]]):
        pulumi.set(self, "triggers", value)

    @property
    @pulumi.getter(name="useSudo")
    def use_sudo(self) -> Optional[pulumi.Input[bool]]:
        """
        if enabled then use sudo for copy command instead of direct copy
        """
        return pulumi.get(self, "use_sudo")

    @use_sudo.setter
    def use_sudo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_sudo", value)

    @property
    @pulumi.getter(name="writebleDirectoryForSudoMode")
    def writeble_directory_for_sudo_mode(self) -> Optional[pulumi.Input[str]]:
        """
        if sudo enabled will use this directory for temporary copy command
        """
        return pulumi.get(self, "writeble_directory_for_sudo_mode")

    @writeble_directory_for_sudo_mode.setter
    def writeble_directory_for_sudo_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "writeble_directory_for_sudo_mode", value)


class File(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['ConnectionArgs']]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 stdin: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 use_sudo: Optional[pulumi.Input[bool]] = None,
                 writeble_directory_for_sudo_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A file to be created on a remote host. The connection is established via ssh.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectionArgs']] connection: The parameters with which to connect to the remote host.
        :param pulumi.Input[str] path: The path for file on remote server
        :param pulumi.Input[str] permissions: Unix permissions for file
        :param pulumi.Input[str] stdin: The content of file
        :param pulumi.Input[Sequence[Any]] triggers: Trigger replacements on changes to this input.
        :param pulumi.Input[bool] use_sudo: if enabled then use sudo for copy command instead of direct copy
        :param pulumi.Input[str] writeble_directory_for_sudo_mode: if sudo enabled will use this directory for temporary copy command
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A file to be created on a remote host. The connection is established via ssh.

        :param str resource_name: The name of the resource.
        :param FileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection: Optional[pulumi.Input[pulumi.InputType['ConnectionArgs']]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 stdin: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[Any]]] = None,
                 use_sudo: Optional[pulumi.Input[bool]] = None,
                 writeble_directory_for_sudo_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FileArgs.__new__(FileArgs)

            if connection is None and not opts.urn:
                raise TypeError("Missing required property 'connection'")
            __props__.__dict__["connection"] = None if connection is None else pulumi.Output.secret(connection)
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["stdin"] = stdin
            __props__.__dict__["triggers"] = triggers
            __props__.__dict__["use_sudo"] = use_sudo
            __props__.__dict__["writeble_directory_for_sudo_mode"] = writeble_directory_for_sudo_mode
            __props__.__dict__["md5sum"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["connection"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(File, __self__).__init__(
            'file:remote:File',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'File':
        """
        Get an existing File resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FileArgs.__new__(FileArgs)

        __props__.__dict__["connection"] = None
        __props__.__dict__["md5sum"] = None
        __props__.__dict__["path"] = None
        __props__.__dict__["permissions"] = None
        __props__.__dict__["stdin"] = None
        __props__.__dict__["triggers"] = None
        __props__.__dict__["use_sudo"] = None
        __props__.__dict__["writeble_directory_for_sudo_mode"] = None
        return File(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def connection(self) -> pulumi.Output['outputs.Connection']:
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def md5sum(self) -> pulumi.Output[str]:
        """
        The md5sum of the uploaded file
        """
        return pulumi.get(self, "md5sum")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The path for file on remote server
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional[str]]:
        """
        Unix permissions for file
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def stdin(self) -> pulumi.Output[Optional[str]]:
        """
        The content of file
        """
        return pulumi.get(self, "stdin")

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Output[Optional[Sequence[Any]]]:
        """
        Trigger replacements on changes to this input.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="useSudo")
    def use_sudo(self) -> pulumi.Output[Optional[bool]]:
        """
        if enabled then use sudo for copy command instead of direct copy
        """
        return pulumi.get(self, "use_sudo")

    @property
    @pulumi.getter(name="writebleDirectoryForSudoMode")
    def writeble_directory_for_sudo_mode(self) -> pulumi.Output[Optional[str]]:
        """
        if sudo enabled will use this directory for temporary copy command
        """
        return pulumi.get(self, "writeble_directory_for_sudo_mode")

